/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package bills.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Bill extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bill\",\"namespace\":\"bills.avro\",\"fields\":[{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"docid\",\"type\":\"string\"},{\"name\":\"docversion\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int year;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public java.lang.CharSequence docid;
  @Deprecated public java.lang.CharSequence docversion;
  @Deprecated public java.lang.CharSequence content;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Bill() {}

  /**
   * All-args constructor.
   */
  public Bill(java.lang.Integer year, java.lang.CharSequence state, java.lang.CharSequence docid, java.lang.CharSequence docversion, java.lang.CharSequence content) {
    this.year = year;
    this.state = state;
    this.docid = docid;
    this.docversion = docversion;
    this.content = content;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return state;
    case 2: return docid;
    case 3: return docversion;
    case 4: return content;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: year = (java.lang.Integer)value$; break;
    case 1: state = (java.lang.CharSequence)value$; break;
    case 2: docid = (java.lang.CharSequence)value$; break;
    case 3: docversion = (java.lang.CharSequence)value$; break;
    case 4: content = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'docid' field.
   */
  public java.lang.CharSequence getDocid() {
    return docid;
  }

  /**
   * Sets the value of the 'docid' field.
   * @param value the value to set.
   */
  public void setDocid(java.lang.CharSequence value) {
    this.docid = value;
  }

  /**
   * Gets the value of the 'docversion' field.
   */
  public java.lang.CharSequence getDocversion() {
    return docversion;
  }

  /**
   * Sets the value of the 'docversion' field.
   * @param value the value to set.
   */
  public void setDocversion(java.lang.CharSequence value) {
    this.docversion = value;
  }

  /**
   * Gets the value of the 'content' field.
   */
  public java.lang.CharSequence getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.CharSequence value) {
    this.content = value;
  }

  /** Creates a new Bill RecordBuilder */
  public static bills.avro.Bill.Builder newBuilder() {
    return new bills.avro.Bill.Builder();
  }
  
  /** Creates a new Bill RecordBuilder by copying an existing Builder */
  public static bills.avro.Bill.Builder newBuilder(bills.avro.Bill.Builder other) {
    return new bills.avro.Bill.Builder(other);
  }
  
  /** Creates a new Bill RecordBuilder by copying an existing Bill instance */
  public static bills.avro.Bill.Builder newBuilder(bills.avro.Bill other) {
    return new bills.avro.Bill.Builder(other);
  }
  
  /**
   * RecordBuilder for Bill instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bill>
    implements org.apache.avro.data.RecordBuilder<Bill> {

    private int year;
    private java.lang.CharSequence state;
    private java.lang.CharSequence docid;
    private java.lang.CharSequence docversion;
    private java.lang.CharSequence content;

    /** Creates a new Builder */
    private Builder() {
      super(bills.avro.Bill.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(bills.avro.Bill.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.docid)) {
        this.docid = data().deepCopy(fields()[2].schema(), other.docid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.docversion)) {
        this.docversion = data().deepCopy(fields()[3].schema(), other.docversion);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.content)) {
        this.content = data().deepCopy(fields()[4].schema(), other.content);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Bill instance */
    private Builder(bills.avro.Bill other) {
            super(bills.avro.Bill.SCHEMA$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.docid)) {
        this.docid = data().deepCopy(fields()[2].schema(), other.docid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.docversion)) {
        this.docversion = data().deepCopy(fields()[3].schema(), other.docversion);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.content)) {
        this.content = data().deepCopy(fields()[4].schema(), other.content);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'year' field */
    public java.lang.Integer getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public bills.avro.Bill.Builder setYear(int value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'year' field */
    public bills.avro.Bill.Builder clearYear() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'state' field */
    public java.lang.CharSequence getState() {
      return state;
    }
    
    /** Sets the value of the 'state' field */
    public bills.avro.Bill.Builder setState(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.state = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'state' field has been set */
    public boolean hasState() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'state' field */
    public bills.avro.Bill.Builder clearState() {
      state = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'docid' field */
    public java.lang.CharSequence getDocid() {
      return docid;
    }
    
    /** Sets the value of the 'docid' field */
    public bills.avro.Bill.Builder setDocid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.docid = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'docid' field has been set */
    public boolean hasDocid() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'docid' field */
    public bills.avro.Bill.Builder clearDocid() {
      docid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'docversion' field */
    public java.lang.CharSequence getDocversion() {
      return docversion;
    }
    
    /** Sets the value of the 'docversion' field */
    public bills.avro.Bill.Builder setDocversion(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.docversion = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'docversion' field has been set */
    public boolean hasDocversion() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'docversion' field */
    public bills.avro.Bill.Builder clearDocversion() {
      docversion = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'content' field */
    public java.lang.CharSequence getContent() {
      return content;
    }
    
    /** Sets the value of the 'content' field */
    public bills.avro.Bill.Builder setContent(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.content = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'content' field has been set */
    public boolean hasContent() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'content' field */
    public bills.avro.Bill.Builder clearContent() {
      content = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Bill build() {
      try {
        Bill record = new Bill();
        record.year = fieldSetFlags()[0] ? this.year : (java.lang.Integer) defaultValue(fields()[0]);
        record.state = fieldSetFlags()[1] ? this.state : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.docid = fieldSetFlags()[2] ? this.docid : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.docversion = fieldSetFlags()[3] ? this.docversion : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.content = fieldSetFlags()[4] ? this.content : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
